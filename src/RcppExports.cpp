// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bpcaNet
List bpcaNet(arma::mat myMat, arma::mat covy, int N, int D, arma::uvec hidden, arma::uvec numberOfNonNAvaluesInEachCol, arma::uvec nomissIndex, arma::uvec missIndex, int nMissing, int nPcs, double threshold, int maxIterations);
RcppExport SEXP _ppcaNet_bpcaNet(SEXP myMatSEXP, SEXP covySEXP, SEXP NSEXP, SEXP DSEXP, SEXP hiddenSEXP, SEXP numberOfNonNAvaluesInEachColSEXP, SEXP nomissIndexSEXP, SEXP missIndexSEXP, SEXP nMissingSEXP, SEXP nPcsSEXP, SEXP thresholdSEXP, SEXP maxIterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type myMat(myMatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covy(covySEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type hidden(hiddenSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type numberOfNonNAvaluesInEachCol(numberOfNonNAvaluesInEachColSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nomissIndex(nomissIndexSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type missIndex(missIndexSEXP);
    Rcpp::traits::input_parameter< int >::type nMissing(nMissingSEXP);
    Rcpp::traits::input_parameter< int >::type nPcs(nPcsSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type maxIterations(maxIterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(bpcaNet(myMat, covy, N, D, hidden, numberOfNonNAvaluesInEachCol, nomissIndex, missIndex, nMissing, nPcs, threshold, maxIterations));
    return rcpp_result_gen;
END_RCPP
}
// pca_updates
List pca_updates(arma::mat X, double V, arma::mat A, arma::cube Av, arma::vec Va, arma::mat S, arma::cube Sv, arma::vec Mu, arma::vec Muv, double Vmu, const double hpVa, const double hpVb, const double hpV, const int ndata, const arma::vec Nobs_i, arma::vec Isv, arma::mat M, const arma::uvec IX, const arma::uvec JX, double rms, arma::mat errMx, const int bias, const int niter_broadprior, const int use_prior, const int use_postvar, const int maxiters, const int verbose);
RcppExport SEXP _ppcaNet_pca_updates(SEXP XSEXP, SEXP VSEXP, SEXP ASEXP, SEXP AvSEXP, SEXP VaSEXP, SEXP SSEXP, SEXP SvSEXP, SEXP MuSEXP, SEXP MuvSEXP, SEXP VmuSEXP, SEXP hpVaSEXP, SEXP hpVbSEXP, SEXP hpVSEXP, SEXP ndataSEXP, SEXP Nobs_iSEXP, SEXP IsvSEXP, SEXP MSEXP, SEXP IXSEXP, SEXP JXSEXP, SEXP rmsSEXP, SEXP errMxSEXP, SEXP biasSEXP, SEXP niter_broadpriorSEXP, SEXP use_priorSEXP, SEXP use_postvarSEXP, SEXP maxitersSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Av(AvSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Va(VaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Sv(SvSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Muv(MuvSEXP);
    Rcpp::traits::input_parameter< double >::type Vmu(VmuSEXP);
    Rcpp::traits::input_parameter< const double >::type hpVa(hpVaSEXP);
    Rcpp::traits::input_parameter< const double >::type hpVb(hpVbSEXP);
    Rcpp::traits::input_parameter< const double >::type hpV(hpVSEXP);
    Rcpp::traits::input_parameter< const int >::type ndata(ndataSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type Nobs_i(Nobs_iSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Isv(IsvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type IX(IXSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type JX(JXSEXP);
    Rcpp::traits::input_parameter< double >::type rms(rmsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type errMx(errMxSEXP);
    Rcpp::traits::input_parameter< const int >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< const int >::type niter_broadprior(niter_broadpriorSEXP);
    Rcpp::traits::input_parameter< const int >::type use_prior(use_priorSEXP);
    Rcpp::traits::input_parameter< const int >::type use_postvar(use_postvarSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiters(maxitersSEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_updates(X, V, A, Av, Va, S, Sv, Mu, Muv, Vmu, hpVa, hpVb, hpV, ndata, Nobs_i, Isv, M, IX, JX, rms, errMx, bias, niter_broadprior, use_prior, use_postvar, maxiters, verbose));
    return rcpp_result_gen;
END_RCPP
}
// ppcaNet
List ppcaNet(arma::mat myMat, int N, int D, arma::mat W, arma::uvec hidden, int nMissing, int nPcs, double threshold, int maxIterations);
RcppExport SEXP _ppcaNet_ppcaNet(SEXP myMatSEXP, SEXP NSEXP, SEXP DSEXP, SEXP WSEXP, SEXP hiddenSEXP, SEXP nMissingSEXP, SEXP nPcsSEXP, SEXP thresholdSEXP, SEXP maxIterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type myMat(myMatSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type hidden(hiddenSEXP);
    Rcpp::traits::input_parameter< int >::type nMissing(nMissingSEXP);
    Rcpp::traits::input_parameter< int >::type nPcs(nPcsSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type maxIterations(maxIterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(ppcaNet(myMat, N, D, W, hidden, nMissing, nPcs, threshold, maxIterations));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ppcaNet_bpcaNet", (DL_FUNC) &_ppcaNet_bpcaNet, 12},
    {"_ppcaNet_pca_updates", (DL_FUNC) &_ppcaNet_pca_updates, 27},
    {"_ppcaNet_ppcaNet", (DL_FUNC) &_ppcaNet_ppcaNet, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_ppcaNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
